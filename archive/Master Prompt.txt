I will give you Python code for a GUI of a simple role playing game.
Your task is to integrate the game logic in this code. The game logic uses access to the Gemini API and structured outputs with pydantic.

Here is a description of the GUI:
"""
I want to code a simple RPG in Python. To this end, I want you to create a simple graphical user interface, fitting for classical role playing games (font/colors/layout, etc). Make sure the user can shift borders of the layout back and forth as he wishes. The GUI consists of the following areas:

## **The attributes of the player**
Attributes are properties of the player character itself.
  - HP (in %). Player is dead at 0%. This is not necessarily the end of the game.
  - Sanity (in %). Player is entirely mad, but not yet dead an 0%. 
  - Satiation (in %). Player starts losing HP when below 10%.  
  - Fatigue (in %). Player starts losing Sanity when below 10%. 
  - Temperature (in °C). Body heat below 35 °C or above 40 °C leads to HP damage. At 25 °C or 50 °C, HP is set to zero.
  - Visibility (in %). Player is invisible at 0%.

All attributes, except for Temperature are type integer. Temperature has one digit.
Showing numbers is sufficient.
Show a new line or seperator between Fatigue and Temperature.

## **Inventory**
All items the character carries with him. They have a name (string) and a weigth in kg (type: single with one digit) each. All items can be either equipped or not equipped. This needs to be visible to the player, but the player cannot change it in the GUI.

## **Perks & skills** 
All perks and skills the player character has. This can includes weaknesses, spells, strengths, etc. All perks & skills are a string and another string which represents the extend to which the skill or perk affects the game (e.g. "fire magic", "advanced knowledge").

## **Current situation** 
A description of the current situation, the player character find himself in. This is a string.

## **Options** 
Options the character has (possibilities to act or maybe not to act at all). Up to 5 options are possible. Each Option is a string.
Each option has a number. By pressing 1,2,3,4 or 5, the player can select and send this option.
This section also offers a possibility for the user to type in his own option. That is, he can ignore all options given and type in what he wants to try to do, instead.

## **Consequence**
The consequences of the specific option the character has chosen in context of the situation he was currently in. This is a string.

## **Image of the scene**
This will show a small picture (png) of the player character in the current situation. For now it shows "placeholder_scene.png"

Add example content to each section.

Please use Python to generate this GUI. Do not implement any game logic yet. Just the pure GUI.
"""

Now please integrate the game loop:
"""
Start of the game:
Read 'world.txt' in the same folder like the python script to understand the world and the GM of the world.
Use Gemini API to generate and then show attributes, inventory, the current situation and respective options.
Since this is the start, the consequences are empty.

Whenever the user chooses an option, do this:

Prompt Gemini API with 
 - the content of world.txt
 - all past descriptions of (then) 'current situations' 
 - all past options taken
 - all past consequences of these options 
 - the current attributes (including descriptions of them)
 - all perks & skills
 - all items in the inventory, including respective weigth and whether they are equipped.
and order Gemini to generate
 - consequences of the option taken
 - updated attributes
 - updated items
 - updated perks & skills
 - new current situation
 - options related to new current situation
Show all new info to the player.
Include a placehlder subroutine to update the 'image of the scene'.

As soon as the player picks an option, this repeats.
"""

## **Example of how Python code should be used to access the Gemini API.**
"""
from google import genai
from pydantic import BaseModel
import os

class Recipe(BaseModel):
  recipe_name: str
  ingredients: list[str]

client = genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))
  
response = client.models.generate_content(
    model='gemini-2.0-flash',
    contents='List two popular cookie recipes.',
    config={
        'temperature':2,
        'response_mime_type': 'application/json',
        'response_schema': list[Recipe],
    },
)
# Use the response as a JSON string.
print(response.text)

# Use instantiated objects.
my_recipes: list[Recipe] = response.parsed
"""

## **Output of this example Python code:**
"""
[
  {
    "recipe_name": "Chocolate Chip Cookies",
    "ingredients": [
      "1 cup (2 sticks) unsalted butter, softened",
      "3/4 cup granulated sugar",
      "3/4 cup packed brown sugar"
    ]
  },
  {
    "recipe_name": "Peanut Butter Cookies",
    "ingredients": [
      "1 cup peanut butter",
      "1 cup granulated sugar"
    ]
  }
]
"""